/**
 * Automic.js Framework
 * @file src/automic.js
 * @author Automic.js
 * @copyright 2017
 * @license MIT
 * @github https://github.com/AutomicJS/automic.js
 * @version 0.0.1
 */
class Automic {
	constructor() {
		this.body 		= document.body || document.getElementsByTagName('body')[0];
		this.head 		= document.head || document.getElementsByTagName('head')[0];
		this.title 		= document.title; 
		this.context 	= this.body; // TODO: Allow multiple-selection of default content, ie default context could be a div called "App"
	}
	getDom(element) {
		if ( typeof element !== 'undefined' && element instanceof Node || typeof element === 'string' ) {
			if ( typeof element === 'string' ) {
				element = this.find(element); // TODO: Maybe make this findElement instead of find?				
			}
			this.context = element;
		}
		return this; 
	}
	display(viewContext) {
		this.context.innerHTML = viewContext; // maybe needs .toString if it's a View Object dynamically generated by JS
	}
	find(attr, method) {
		if ( typeof method !== 'undefined' && typeof method === 'string' ) {
			if( method == 'QS' ) {
				return document.querySelectorAll(attr);
			}
		}
		if ( attr instanceof Node ) {
			return attr; 
		}
		if ( typeof attr !== 'undefined' && typeof attr == 'string' ) {
			var isDiv = attr.startsWith('#'),
				isClass = attr.startsWith('.'),
				isTag = attr.startsWith('<') && attr.endsWith('>'); 
			if(isDiv) {
				attr = attr.replace('#', '');
				var documentElement = document.getElementById(attr);
				if(documentElement instanceof Node) {
					return documentElement;
				}
				else {
					return '#' + attr;
				}
			}
			else if ( isClass ) {
				attr = attr.replace('.', '');
				var documentElement = document.getElementsByClassName(attr); 
				if(documentElement instanceof Node && documentElement.length > 0) {
					return documentElement;
				} 
				else {
					return '.' + attr;
				}
			}
			else if ( isTag ) {
				attr = attr.replace('<', '').replace('>', '');
				var documentElement = document.getElementsByTagName(attr);
				if(documentElement instanceof Node) {
					return documentElement;
				}
				else {
					return '<' + attr + '>'; 
				}
			}
			else {
				return this.error('Failed to find node requested.', false);
			}
		}
	}
	error(message, non_blocking) {
		if( typeof non_blocking === 'undefined' ) {
			var non_blocking = true;
		}
		if ( typeof message !== 'undefined' && message.length !== 0 && message.length > 5 ) {
			// Good error messages are greater than 5 characters, and under 25 characters 
			if ( non_blocking ) {
				console.log('Error: ' + message);
				return {
					status: 'error',
					message: message
				};
			}
			else {
				console.log('Error: ' + message);
				throw new Error(`A render-blocking error occured. Error message supplied: ${message}.`);
			}
		}
	}
	setNodeAttributes(attrName, attrValue){
		var nodeInstance 	= this.context;
		if ( nodeInstance instanceof Array ) {
			nodeInstance = nodeInstance[0]; // default to first index
		} 
		var existingAttrs 	= nodeInstance.attributes;
		if ( typeof existingAttrs[attrName] !== 'undefined' ) {
			nodeInstance.removeAttribute( attrName );
		}
		nodeInstance.setAttribute(attrName, attrValue);
	}
}
